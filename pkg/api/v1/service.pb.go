// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: pkg/api/v1/service.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ValueType int32

const (
	ValueType_STRING  ValueType = 0
	ValueType_INTEGER ValueType = 1
	ValueType_DOUBLE  ValueType = 2
	ValueType_BOOLEAN ValueType = 3
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "STRING",
		1: "INTEGER",
		2: "DOUBLE",
		3: "BOOLEAN",
	}
	ValueType_value = map[string]int32{
		"STRING":  0,
		"INTEGER": 1,
		"DOUBLE":  2,
		"BOOLEAN": 3,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_service_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_service_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{0}
}

type ObjectView int32

const (
	ObjectView_BASIC  ObjectView = 0
	ObjectView_NORMAL ObjectView = 1
	ObjectView_RICH   ObjectView = 2
)

// Enum value maps for ObjectView.
var (
	ObjectView_name = map[int32]string{
		0: "BASIC",
		1: "NORMAL",
		2: "RICH",
	}
	ObjectView_value = map[string]int32{
		"BASIC":  0,
		"NORMAL": 1,
		"RICH":   2,
	}
)

func (x ObjectView) Enum() *ObjectView {
	p := new(ObjectView)
	*p = x
	return p
}

func (x ObjectView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectView) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_service_proto_enumTypes[1].Descriptor()
}

func (ObjectView) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_service_proto_enumTypes[1]
}

func (x ObjectView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectView.Descriptor instead.
func (ObjectView) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{1}
}

type WatchEventType int32

const (
	WatchEventType_INIT   WatchEventType = 0
	WatchEventType_CREATE WatchEventType = 1
	WatchEventType_UPDATE WatchEventType = 2
	WatchEventType_DELETE WatchEventType = 3
)

// Enum value maps for WatchEventType.
var (
	WatchEventType_name = map[int32]string{
		0: "INIT",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	WatchEventType_value = map[string]int32{
		"INIT":   0,
		"CREATE": 1,
		"UPDATE": 2,
		"DELETE": 3,
	}
)

func (x WatchEventType) Enum() *WatchEventType {
	p := new(WatchEventType)
	*p = x
	return p
}

func (x WatchEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_service_proto_enumTypes[2].Descriptor()
}

func (WatchEventType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_service_proto_enumTypes[2]
}

func (x WatchEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchEventType.Descriptor instead.
func (WatchEventType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{2}
}

type ObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Statuses    map[string]*ObjectStatus `protobuf:"bytes,3,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metas       map[string]*ObjectMeta   `protobuf:"bytes,4,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime  *timestamp.Timestamp     `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DeleteTime  *timestamp.Timestamp     `protobuf:"bytes,6,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectType) GetStatuses() map[string]*ObjectStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ObjectType) GetMetas() map[string]*ObjectMeta {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *ObjectType) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ObjectType) GetDeleteTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type ObjectStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	States      map[string]*ObjectState `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectStatus) Reset() {
	*x = ObjectStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStatus) ProtoMessage() {}

func (x *ObjectStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStatus.ProtoReflect.Descriptor instead.
func (*ObjectStatus) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectStatus) GetStates() map[string]*ObjectState {
	if x != nil {
		return x.States
	}
	return nil
}

type ObjectState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ObjectState) Reset() {
	*x = ObjectState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectState) ProtoMessage() {}

func (x *ObjectState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectState.ProtoReflect.Descriptor instead.
func (*ObjectState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ObjectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ValueType   ValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=zhihu.cmdb.api.v1.ValueType" json:"value_type,omitempty"`
}

func (x *ObjectMeta) Reset() {
	*x = ObjectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMeta) ProtoMessage() {}

func (x *ObjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMeta.ProtoReflect.Descriptor instead.
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ObjectMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectMeta) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_STRING
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string                      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      string                      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	State       string                      `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Version     uint64                      `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	CreateTime  *timestamp.Timestamp        `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  *timestamp.Timestamp        `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Metas       map[string]*ObjectMetaValue `protobuf:"bytes,9,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *Object) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Object) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Object) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Object) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Object) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Object) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Object) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Object) GetMetas() map[string]*ObjectMetaValue {
	if x != nil {
		return x.Metas
	}
	return nil
}

type ObjectMetaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType ValueType `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=zhihu.cmdb.api.v1.ValueType" json:"value_type,omitempty"`
	Value     string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ObjectMetaValue) Reset() {
	*x = ObjectMetaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMetaValue) ProtoMessage() {}

func (x *ObjectMetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMetaValue.ProtoReflect.Descriptor instead.
func (*ObjectMetaValue) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ObjectMetaValue) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_STRING
}

func (x *ObjectMetaValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	View        ObjectView `protobuf:"varint,2,opt,name=view,proto3,enum=zhihu.cmdb.api.v1.ObjectView" json:"view,omitempty"`
	Query       string     `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	PageToken   string     `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize    int32      `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ShowDeleted bool       `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
}

func (x *ListObjectRequest) Reset() {
	*x = ListObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectRequest) ProtoMessage() {}

func (x *ListObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectRequest.ProtoReflect.Descriptor instead.
func (*ListObjectRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListObjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListObjectRequest) GetView() ObjectView {
	if x != nil {
		return x.View
	}
	return ObjectView_BASIC
}

func (x *ListObjectRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListObjectRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListObjectRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListObjectRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type GetObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	View ObjectView `protobuf:"varint,3,opt,name=view,proto3,enum=zhihu.cmdb.api.v1.ObjectView" json:"view,omitempty"`
}

func (x *GetObjectRequest) Reset() {
	*x = GetObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectRequest) ProtoMessage() {}

func (x *GetObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectRequest.ProtoReflect.Descriptor instead.
func (*GetObjectRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetObjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetObjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetObjectRequest) GetView() ObjectView {
	if x != nil {
		return x.View
	}
	return ObjectView_BASIC
}

type DeleteObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteObjectRequest) Reset() {
	*x = DeleteObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectRequest) ProtoMessage() {}

func (x *DeleteObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteObjectRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteObjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string    `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Objects       []*Object `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	NextPageToken string    `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListObjectResponse) Reset() {
	*x = ListObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectResponse) ProtoMessage() {}

func (x *ListObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectResponse.ProtoReflect.Descriptor instead.
func (*ListObjectResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListObjectResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListObjectResponse) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ListObjectResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ObjectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*Object      `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	Type    WatchEventType `protobuf:"varint,2,opt,name=type,proto3,enum=zhihu.cmdb.api.v1.WatchEventType" json:"type,omitempty"`
}

func (x *ObjectEvent) Reset() {
	*x = ObjectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEvent) ProtoMessage() {}

func (x *ObjectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEvent.ProtoReflect.Descriptor instead.
func (*ObjectEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectEvent) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ObjectEvent) GetType() WatchEventType {
	if x != nil {
		return x.Type
	}
	return WatchEventType_INIT
}

type ObjectUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object       *Object               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	UpdateMask   *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	MatchVersion bool                  `protobuf:"varint,3,opt,name=match_version,json=matchVersion,proto3" json:"match_version,omitempty"`
}

func (x *ObjectUpdateRequest) Reset() {
	*x = ObjectUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUpdateRequest) ProtoMessage() {}

func (x *ObjectUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUpdateRequest.ProtoReflect.Descriptor instead.
func (*ObjectUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectUpdateRequest) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ObjectUpdateRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ObjectUpdateRequest) GetMatchVersion() bool {
	if x != nil {
		return x.MatchVersion
	}
	return false
}

type GetObjectTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetObjectTypeRequest) Reset() {
	*x = GetObjectTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectTypeRequest) ProtoMessage() {}

func (x *GetObjectTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectTypeRequest.ProtoReflect.Descriptor instead.
func (*GetObjectTypeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetObjectTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListObjectTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDeleted bool `protobuf:"varint,1,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	Consistent  bool `protobuf:"varint,2,opt,name=consistent,proto3" json:"consistent,omitempty"`
}

func (x *ListObjectTypesRequest) Reset() {
	*x = ListObjectTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectTypesRequest) ProtoMessage() {}

func (x *ListObjectTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectTypesRequest.ProtoReflect.Descriptor instead.
func (*ListObjectTypesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListObjectTypesRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

func (x *ListObjectTypesRequest) GetConsistent() bool {
	if x != nil {
		return x.Consistent
	}
	return false
}

type ListObjectTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*ObjectType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *ListObjectTypesResponse) Reset() {
	*x = ListObjectTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectTypesResponse) ProtoMessage() {}

func (x *ListObjectTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectTypesResponse.ProtoReflect.Descriptor instead.
func (*ListObjectTypesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListObjectTypesResponse) GetTypes() []*ObjectType {
	if x != nil {
		return x.Types
	}
	return nil
}

type UpdateObjectTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *ObjectType           `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateObjectTypeRequest) Reset() {
	*x = UpdateObjectTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObjectTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectTypeRequest) ProtoMessage() {}

func (x *UpdateObjectTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectTypeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateObjectTypeRequest) GetType() *ObjectType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UpdateObjectTypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type RelationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	From        string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metas       map[string]*ObjectMeta `protobuf:"bytes,5,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime  *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime  *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *RelationType) Reset() {
	*x = RelationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationType) ProtoMessage() {}

func (x *RelationType) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationType.ProtoReflect.Descriptor instead.
func (*RelationType) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *RelationType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationType) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RelationType) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *RelationType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelationType) GetMetas() map[string]*ObjectMeta {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *RelationType) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RelationType) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RelationType) GetDeleteTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type ListRelationTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDeleted bool `protobuf:"varint,1,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	Consistent  bool `protobuf:"varint,2,opt,name=consistent,proto3" json:"consistent,omitempty"`
}

func (x *ListRelationTypesRequest) Reset() {
	*x = ListRelationTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelationTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelationTypesRequest) ProtoMessage() {}

func (x *ListRelationTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelationTypesRequest.ProtoReflect.Descriptor instead.
func (*ListRelationTypesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListRelationTypesRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

func (x *ListRelationTypesRequest) GetConsistent() bool {
	if x != nil {
		return x.Consistent
	}
	return false
}

type UpdateRelationTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *RelationType         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRelationTypeRequest) Reset() {
	*x = UpdateRelationTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelationTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelationTypeRequest) ProtoMessage() {}

func (x *UpdateRelationTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelationTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelationTypeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRelationTypeRequest) GetType() *RelationType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UpdateRelationTypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ListRelationTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*RelationType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *ListRelationTypesResponse) Reset() {
	*x = ListRelationTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelationTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelationTypesResponse) ProtoMessage() {}

func (x *ListRelationTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelationTypesResponse.ProtoReflect.Descriptor instead.
func (*ListRelationTypesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListRelationTypesResponse) GetTypes() []*RelationType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ObjectReference) Reset() {
	*x = ObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReference) ProtoMessage() {}

func (x *ObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReference.ProtoReflect.Descriptor instead.
func (*ObjectReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *ObjectReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation   string                      `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	From       *ObjectReference            `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         *ObjectReference            `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Metas      map[string]*ObjectMetaValue `protobuf:"bytes,6,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime *timestamp.Timestamp        `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamp.Timestamp        `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime *timestamp.Timestamp        `protobuf:"bytes,9,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *Relation) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *Relation) GetFrom() *ObjectReference {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Relation) GetTo() *ObjectReference {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Relation) GetMetas() map[string]*ObjectMetaValue {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *Relation) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Relation) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Relation) GetDeleteTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type RichRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation   string                      `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	From       *Object                     `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         *Object                     `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Metas      map[string]*ObjectMetaValue `protobuf:"bytes,6,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime *timestamp.Timestamp        `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamp.Timestamp        `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeleteTime *timestamp.Timestamp        `protobuf:"bytes,9,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *RichRelation) Reset() {
	*x = RichRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichRelation) ProtoMessage() {}

func (x *RichRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichRelation.ProtoReflect.Descriptor instead.
func (*RichRelation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *RichRelation) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *RichRelation) GetFrom() *Object {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RichRelation) GetTo() *Object {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RichRelation) GetMetas() map[string]*ObjectMetaValue {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *RichRelation) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RichRelation) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RichRelation) GetDeleteTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type UpdateRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation   *Relation             `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRelationRequest) Reset() {
	*x = UpdateRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelationRequest) ProtoMessage() {}

func (x *UpdateRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelationRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateRelationRequest) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *UpdateRelationRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ListRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Relation string `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ListRelationRequest) Reset() {
	*x = ListRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelationRequest) ProtoMessage() {}

func (x *ListRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelationRequest.ProtoReflect.Descriptor instead.
func (*ListRelationRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListRelationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListRelationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ListRelationRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type WatchRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Relation string `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	Query    string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *WatchRelationRequest) Reset() {
	*x = WatchRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRelationRequest) ProtoMessage() {}

func (x *WatchRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRelationRequest.ProtoReflect.Descriptor instead.
func (*WatchRelationRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *WatchRelationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *WatchRelationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *WatchRelationRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *WatchRelationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*Relation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *ListRelationResponse) Reset() {
	*x = ListRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelationResponse) ProtoMessage() {}

func (x *ListRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelationResponse.ProtoReflect.Descriptor instead.
func (*ListRelationResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListRelationResponse) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type RelationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*RichRelation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
	Type      WatchEventType  `protobuf:"varint,2,opt,name=type,proto3,enum=zhihu.cmdb.api.v1.WatchEventType" json:"type,omitempty"`
}

func (x *RelationEvent) Reset() {
	*x = RelationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationEvent) ProtoMessage() {}

func (x *RelationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationEvent.ProtoReflect.Descriptor instead.
func (*RelationEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *RelationEvent) GetRelations() []*RichRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *RelationEvent) GetType() WatchEventType {
	if x != nil {
		return x.Type
	}
	return WatchEventType_INIT
}

var File_pkg_api_v1_service_proto protoreflect.FileDescriptor

var file_pkg_api_v1_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc,
	0x03, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x68,
	0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5c, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75,
	0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01,
	0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x0a, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x06, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x1a, 0x5c, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a,
	0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0f, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x3d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x0b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x68,
	0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xba, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x57, 0x0a, 0x0a, 0x4d, 0x65,
	0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x52, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe5, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75,
	0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5c, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x68, 0x69,
	0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x03, 0x0a, 0x0c, 0x52, 0x69,
	0x63, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x40, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5c, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75,
	0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c,
	0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e,
	0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x3d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x2a, 0x2d, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x49, 0x43, 0x48, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x03, 0x32, 0xab, 0x06, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0x6c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x72, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65,
	0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x19, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a,
	0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a,
	0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x2a, 0x2f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x68, 0x69, 0x68,
	0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0xd4, 0x04, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1d, 0x2e, 0x7a,
	0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x7a, 0x68, 0x69,
	0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x72, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x75, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0xe1, 0x04, 0x0a, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e,
	0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x71, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0xff,
	0x08, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9f, 0x01, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e,
	0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x99,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d,
	0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xdb, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x82, 0x01, 0x1a, 0x7d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1b, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x74,
	0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75,
	0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x66, 0x72,
	0x6f, 0x6d, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x2e, 0x7a, 0x68, 0x69,
	0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x74,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x7a, 0x68,
	0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x7d, 0x2f, 0x7b, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01,
	0x42, 0x26, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x68, 0x69, 0x68, 0x75, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x5a, 0x0d, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v1_service_proto_rawDescOnce sync.Once
	file_pkg_api_v1_service_proto_rawDescData = file_pkg_api_v1_service_proto_rawDesc
)

func file_pkg_api_v1_service_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_service_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_service_proto_rawDescData)
	})
	return file_pkg_api_v1_service_proto_rawDescData
}

var file_pkg_api_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_api_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_pkg_api_v1_service_proto_goTypes = []interface{}{
	(ValueType)(0),                    // 0: zhihu.cmdb.api.v1.ValueType
	(ObjectView)(0),                   // 1: zhihu.cmdb.api.v1.ObjectView
	(WatchEventType)(0),               // 2: zhihu.cmdb.api.v1.WatchEventType
	(*ObjectType)(nil),                // 3: zhihu.cmdb.api.v1.ObjectType
	(*ObjectStatus)(nil),              // 4: zhihu.cmdb.api.v1.ObjectStatus
	(*ObjectState)(nil),               // 5: zhihu.cmdb.api.v1.ObjectState
	(*ObjectMeta)(nil),                // 6: zhihu.cmdb.api.v1.ObjectMeta
	(*Object)(nil),                    // 7: zhihu.cmdb.api.v1.Object
	(*ObjectMetaValue)(nil),           // 8: zhihu.cmdb.api.v1.ObjectMetaValue
	(*ListObjectRequest)(nil),         // 9: zhihu.cmdb.api.v1.ListObjectRequest
	(*GetObjectRequest)(nil),          // 10: zhihu.cmdb.api.v1.GetObjectRequest
	(*DeleteObjectRequest)(nil),       // 11: zhihu.cmdb.api.v1.DeleteObjectRequest
	(*ListObjectResponse)(nil),        // 12: zhihu.cmdb.api.v1.ListObjectResponse
	(*ObjectEvent)(nil),               // 13: zhihu.cmdb.api.v1.ObjectEvent
	(*ObjectUpdateRequest)(nil),       // 14: zhihu.cmdb.api.v1.ObjectUpdateRequest
	(*GetObjectTypeRequest)(nil),      // 15: zhihu.cmdb.api.v1.GetObjectTypeRequest
	(*ListObjectTypesRequest)(nil),    // 16: zhihu.cmdb.api.v1.ListObjectTypesRequest
	(*ListObjectTypesResponse)(nil),   // 17: zhihu.cmdb.api.v1.ListObjectTypesResponse
	(*UpdateObjectTypeRequest)(nil),   // 18: zhihu.cmdb.api.v1.UpdateObjectTypeRequest
	(*RelationType)(nil),              // 19: zhihu.cmdb.api.v1.RelationType
	(*ListRelationTypesRequest)(nil),  // 20: zhihu.cmdb.api.v1.ListRelationTypesRequest
	(*UpdateRelationTypeRequest)(nil), // 21: zhihu.cmdb.api.v1.UpdateRelationTypeRequest
	(*ListRelationTypesResponse)(nil), // 22: zhihu.cmdb.api.v1.ListRelationTypesResponse
	(*ObjectReference)(nil),           // 23: zhihu.cmdb.api.v1.ObjectReference
	(*Relation)(nil),                  // 24: zhihu.cmdb.api.v1.Relation
	(*RichRelation)(nil),              // 25: zhihu.cmdb.api.v1.RichRelation
	(*UpdateRelationRequest)(nil),     // 26: zhihu.cmdb.api.v1.UpdateRelationRequest
	(*ListRelationRequest)(nil),       // 27: zhihu.cmdb.api.v1.ListRelationRequest
	(*WatchRelationRequest)(nil),      // 28: zhihu.cmdb.api.v1.WatchRelationRequest
	(*ListRelationResponse)(nil),      // 29: zhihu.cmdb.api.v1.ListRelationResponse
	(*RelationEvent)(nil),             // 30: zhihu.cmdb.api.v1.RelationEvent
	nil,                               // 31: zhihu.cmdb.api.v1.ObjectType.StatusesEntry
	nil,                               // 32: zhihu.cmdb.api.v1.ObjectType.MetasEntry
	nil,                               // 33: zhihu.cmdb.api.v1.ObjectStatus.StatesEntry
	nil,                               // 34: zhihu.cmdb.api.v1.Object.MetasEntry
	nil,                               // 35: zhihu.cmdb.api.v1.RelationType.MetasEntry
	nil,                               // 36: zhihu.cmdb.api.v1.Relation.MetasEntry
	nil,                               // 37: zhihu.cmdb.api.v1.RichRelation.MetasEntry
	(*timestamp.Timestamp)(nil),       // 38: google.protobuf.Timestamp
	(*field_mask.FieldMask)(nil),      // 39: google.protobuf.FieldMask
}
var file_pkg_api_v1_service_proto_depIdxs = []int32{
	31, // 0: zhihu.cmdb.api.v1.ObjectType.statuses:type_name -> zhihu.cmdb.api.v1.ObjectType.StatusesEntry
	32, // 1: zhihu.cmdb.api.v1.ObjectType.metas:type_name -> zhihu.cmdb.api.v1.ObjectType.MetasEntry
	38, // 2: zhihu.cmdb.api.v1.ObjectType.create_time:type_name -> google.protobuf.Timestamp
	38, // 3: zhihu.cmdb.api.v1.ObjectType.delete_time:type_name -> google.protobuf.Timestamp
	33, // 4: zhihu.cmdb.api.v1.ObjectStatus.states:type_name -> zhihu.cmdb.api.v1.ObjectStatus.StatesEntry
	0,  // 5: zhihu.cmdb.api.v1.ObjectMeta.value_type:type_name -> zhihu.cmdb.api.v1.ValueType
	38, // 6: zhihu.cmdb.api.v1.Object.create_time:type_name -> google.protobuf.Timestamp
	38, // 7: zhihu.cmdb.api.v1.Object.update_time:type_name -> google.protobuf.Timestamp
	34, // 8: zhihu.cmdb.api.v1.Object.metas:type_name -> zhihu.cmdb.api.v1.Object.MetasEntry
	0,  // 9: zhihu.cmdb.api.v1.ObjectMetaValue.value_type:type_name -> zhihu.cmdb.api.v1.ValueType
	1,  // 10: zhihu.cmdb.api.v1.ListObjectRequest.view:type_name -> zhihu.cmdb.api.v1.ObjectView
	1,  // 11: zhihu.cmdb.api.v1.GetObjectRequest.view:type_name -> zhihu.cmdb.api.v1.ObjectView
	7,  // 12: zhihu.cmdb.api.v1.ListObjectResponse.objects:type_name -> zhihu.cmdb.api.v1.Object
	7,  // 13: zhihu.cmdb.api.v1.ObjectEvent.objects:type_name -> zhihu.cmdb.api.v1.Object
	2,  // 14: zhihu.cmdb.api.v1.ObjectEvent.type:type_name -> zhihu.cmdb.api.v1.WatchEventType
	7,  // 15: zhihu.cmdb.api.v1.ObjectUpdateRequest.object:type_name -> zhihu.cmdb.api.v1.Object
	39, // 16: zhihu.cmdb.api.v1.ObjectUpdateRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 17: zhihu.cmdb.api.v1.ListObjectTypesResponse.types:type_name -> zhihu.cmdb.api.v1.ObjectType
	3,  // 18: zhihu.cmdb.api.v1.UpdateObjectTypeRequest.type:type_name -> zhihu.cmdb.api.v1.ObjectType
	39, // 19: zhihu.cmdb.api.v1.UpdateObjectTypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	35, // 20: zhihu.cmdb.api.v1.RelationType.metas:type_name -> zhihu.cmdb.api.v1.RelationType.MetasEntry
	38, // 21: zhihu.cmdb.api.v1.RelationType.create_time:type_name -> google.protobuf.Timestamp
	38, // 22: zhihu.cmdb.api.v1.RelationType.update_time:type_name -> google.protobuf.Timestamp
	38, // 23: zhihu.cmdb.api.v1.RelationType.delete_time:type_name -> google.protobuf.Timestamp
	19, // 24: zhihu.cmdb.api.v1.UpdateRelationTypeRequest.type:type_name -> zhihu.cmdb.api.v1.RelationType
	39, // 25: zhihu.cmdb.api.v1.UpdateRelationTypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	19, // 26: zhihu.cmdb.api.v1.ListRelationTypesResponse.types:type_name -> zhihu.cmdb.api.v1.RelationType
	23, // 27: zhihu.cmdb.api.v1.Relation.from:type_name -> zhihu.cmdb.api.v1.ObjectReference
	23, // 28: zhihu.cmdb.api.v1.Relation.to:type_name -> zhihu.cmdb.api.v1.ObjectReference
	36, // 29: zhihu.cmdb.api.v1.Relation.metas:type_name -> zhihu.cmdb.api.v1.Relation.MetasEntry
	38, // 30: zhihu.cmdb.api.v1.Relation.create_time:type_name -> google.protobuf.Timestamp
	38, // 31: zhihu.cmdb.api.v1.Relation.update_time:type_name -> google.protobuf.Timestamp
	38, // 32: zhihu.cmdb.api.v1.Relation.delete_time:type_name -> google.protobuf.Timestamp
	7,  // 33: zhihu.cmdb.api.v1.RichRelation.from:type_name -> zhihu.cmdb.api.v1.Object
	7,  // 34: zhihu.cmdb.api.v1.RichRelation.to:type_name -> zhihu.cmdb.api.v1.Object
	37, // 35: zhihu.cmdb.api.v1.RichRelation.metas:type_name -> zhihu.cmdb.api.v1.RichRelation.MetasEntry
	38, // 36: zhihu.cmdb.api.v1.RichRelation.create_time:type_name -> google.protobuf.Timestamp
	38, // 37: zhihu.cmdb.api.v1.RichRelation.update_time:type_name -> google.protobuf.Timestamp
	38, // 38: zhihu.cmdb.api.v1.RichRelation.delete_time:type_name -> google.protobuf.Timestamp
	24, // 39: zhihu.cmdb.api.v1.UpdateRelationRequest.relation:type_name -> zhihu.cmdb.api.v1.Relation
	39, // 40: zhihu.cmdb.api.v1.UpdateRelationRequest.update_mask:type_name -> google.protobuf.FieldMask
	24, // 41: zhihu.cmdb.api.v1.ListRelationResponse.relations:type_name -> zhihu.cmdb.api.v1.Relation
	25, // 42: zhihu.cmdb.api.v1.RelationEvent.relations:type_name -> zhihu.cmdb.api.v1.RichRelation
	2,  // 43: zhihu.cmdb.api.v1.RelationEvent.type:type_name -> zhihu.cmdb.api.v1.WatchEventType
	4,  // 44: zhihu.cmdb.api.v1.ObjectType.StatusesEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectStatus
	6,  // 45: zhihu.cmdb.api.v1.ObjectType.MetasEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectMeta
	5,  // 46: zhihu.cmdb.api.v1.ObjectStatus.StatesEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectState
	8,  // 47: zhihu.cmdb.api.v1.Object.MetasEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectMetaValue
	6,  // 48: zhihu.cmdb.api.v1.RelationType.MetasEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectMeta
	8,  // 49: zhihu.cmdb.api.v1.Relation.MetasEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectMetaValue
	8,  // 50: zhihu.cmdb.api.v1.RichRelation.MetasEntry.value:type_name -> zhihu.cmdb.api.v1.ObjectMetaValue
	9,  // 51: zhihu.cmdb.api.v1.Objects.List:input_type -> zhihu.cmdb.api.v1.ListObjectRequest
	10, // 52: zhihu.cmdb.api.v1.Objects.Get:input_type -> zhihu.cmdb.api.v1.GetObjectRequest
	11, // 53: zhihu.cmdb.api.v1.Objects.Delete:input_type -> zhihu.cmdb.api.v1.DeleteObjectRequest
	7,  // 54: zhihu.cmdb.api.v1.Objects.Create:input_type -> zhihu.cmdb.api.v1.Object
	14, // 55: zhihu.cmdb.api.v1.Objects.Update:input_type -> zhihu.cmdb.api.v1.ObjectUpdateRequest
	9,  // 56: zhihu.cmdb.api.v1.Objects.Watch:input_type -> zhihu.cmdb.api.v1.ListObjectRequest
	10, // 57: zhihu.cmdb.api.v1.Objects.Relations:input_type -> zhihu.cmdb.api.v1.GetObjectRequest
	3,  // 58: zhihu.cmdb.api.v1.ObjectTypes.Create:input_type -> zhihu.cmdb.api.v1.ObjectType
	18, // 59: zhihu.cmdb.api.v1.ObjectTypes.Update:input_type -> zhihu.cmdb.api.v1.UpdateObjectTypeRequest
	16, // 60: zhihu.cmdb.api.v1.ObjectTypes.List:input_type -> zhihu.cmdb.api.v1.ListObjectTypesRequest
	15, // 61: zhihu.cmdb.api.v1.ObjectTypes.Get:input_type -> zhihu.cmdb.api.v1.GetObjectTypeRequest
	15, // 62: zhihu.cmdb.api.v1.ObjectTypes.Delete:input_type -> zhihu.cmdb.api.v1.GetObjectTypeRequest
	19, // 63: zhihu.cmdb.api.v1.RelationTypes.Create:input_type -> zhihu.cmdb.api.v1.RelationType
	21, // 64: zhihu.cmdb.api.v1.RelationTypes.Update:input_type -> zhihu.cmdb.api.v1.UpdateRelationTypeRequest
	20, // 65: zhihu.cmdb.api.v1.RelationTypes.List:input_type -> zhihu.cmdb.api.v1.ListRelationTypesRequest
	19, // 66: zhihu.cmdb.api.v1.RelationTypes.Get:input_type -> zhihu.cmdb.api.v1.RelationType
	19, // 67: zhihu.cmdb.api.v1.RelationTypes.Delete:input_type -> zhihu.cmdb.api.v1.RelationType
	24, // 68: zhihu.cmdb.api.v1.Relations.Create:input_type -> zhihu.cmdb.api.v1.Relation
	24, // 69: zhihu.cmdb.api.v1.Relations.Get:input_type -> zhihu.cmdb.api.v1.Relation
	26, // 70: zhihu.cmdb.api.v1.Relations.Update:input_type -> zhihu.cmdb.api.v1.UpdateRelationRequest
	24, // 71: zhihu.cmdb.api.v1.Relations.Delete:input_type -> zhihu.cmdb.api.v1.Relation
	27, // 72: zhihu.cmdb.api.v1.Relations.List:input_type -> zhihu.cmdb.api.v1.ListRelationRequest
	24, // 73: zhihu.cmdb.api.v1.Relations.Edges:input_type -> zhihu.cmdb.api.v1.Relation
	28, // 74: zhihu.cmdb.api.v1.Relations.Watch:input_type -> zhihu.cmdb.api.v1.WatchRelationRequest
	12, // 75: zhihu.cmdb.api.v1.Objects.List:output_type -> zhihu.cmdb.api.v1.ListObjectResponse
	7,  // 76: zhihu.cmdb.api.v1.Objects.Get:output_type -> zhihu.cmdb.api.v1.Object
	7,  // 77: zhihu.cmdb.api.v1.Objects.Delete:output_type -> zhihu.cmdb.api.v1.Object
	7,  // 78: zhihu.cmdb.api.v1.Objects.Create:output_type -> zhihu.cmdb.api.v1.Object
	7,  // 79: zhihu.cmdb.api.v1.Objects.Update:output_type -> zhihu.cmdb.api.v1.Object
	13, // 80: zhihu.cmdb.api.v1.Objects.Watch:output_type -> zhihu.cmdb.api.v1.ObjectEvent
	29, // 81: zhihu.cmdb.api.v1.Objects.Relations:output_type -> zhihu.cmdb.api.v1.ListRelationResponse
	3,  // 82: zhihu.cmdb.api.v1.ObjectTypes.Create:output_type -> zhihu.cmdb.api.v1.ObjectType
	3,  // 83: zhihu.cmdb.api.v1.ObjectTypes.Update:output_type -> zhihu.cmdb.api.v1.ObjectType
	17, // 84: zhihu.cmdb.api.v1.ObjectTypes.List:output_type -> zhihu.cmdb.api.v1.ListObjectTypesResponse
	3,  // 85: zhihu.cmdb.api.v1.ObjectTypes.Get:output_type -> zhihu.cmdb.api.v1.ObjectType
	3,  // 86: zhihu.cmdb.api.v1.ObjectTypes.Delete:output_type -> zhihu.cmdb.api.v1.ObjectType
	19, // 87: zhihu.cmdb.api.v1.RelationTypes.Create:output_type -> zhihu.cmdb.api.v1.RelationType
	19, // 88: zhihu.cmdb.api.v1.RelationTypes.Update:output_type -> zhihu.cmdb.api.v1.RelationType
	22, // 89: zhihu.cmdb.api.v1.RelationTypes.List:output_type -> zhihu.cmdb.api.v1.ListRelationTypesResponse
	19, // 90: zhihu.cmdb.api.v1.RelationTypes.Get:output_type -> zhihu.cmdb.api.v1.RelationType
	19, // 91: zhihu.cmdb.api.v1.RelationTypes.Delete:output_type -> zhihu.cmdb.api.v1.RelationType
	24, // 92: zhihu.cmdb.api.v1.Relations.Create:output_type -> zhihu.cmdb.api.v1.Relation
	24, // 93: zhihu.cmdb.api.v1.Relations.Get:output_type -> zhihu.cmdb.api.v1.Relation
	24, // 94: zhihu.cmdb.api.v1.Relations.Update:output_type -> zhihu.cmdb.api.v1.Relation
	24, // 95: zhihu.cmdb.api.v1.Relations.Delete:output_type -> zhihu.cmdb.api.v1.Relation
	29, // 96: zhihu.cmdb.api.v1.Relations.List:output_type -> zhihu.cmdb.api.v1.ListRelationResponse
	29, // 97: zhihu.cmdb.api.v1.Relations.Edges:output_type -> zhihu.cmdb.api.v1.ListRelationResponse
	30, // 98: zhihu.cmdb.api.v1.Relations.Watch:output_type -> zhihu.cmdb.api.v1.RelationEvent
	75, // [75:99] is the sub-list for method output_type
	51, // [51:75] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_service_proto_init() }
func file_pkg_api_v1_service_proto_init() {
	if File_pkg_api_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectMetaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObjectTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelationTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelationTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelationTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_pkg_api_v1_service_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_service_proto_depIdxs,
		EnumInfos:         file_pkg_api_v1_service_proto_enumTypes,
		MessageInfos:      file_pkg_api_v1_service_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_service_proto = out.File
	file_pkg_api_v1_service_proto_rawDesc = nil
	file_pkg_api_v1_service_proto_goTypes = nil
	file_pkg_api_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ObjectsClient is the client API for Objects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectsClient interface {
	List(ctx context.Context, in *ListObjectRequest, opts ...grpc.CallOption) (*ListObjectResponse, error)
	Get(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*Object, error)
	Delete(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*Object, error)
	Create(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	Update(ctx context.Context, in *ObjectUpdateRequest, opts ...grpc.CallOption) (*Object, error)
	Watch(ctx context.Context, in *ListObjectRequest, opts ...grpc.CallOption) (Objects_WatchClient, error)
	Relations(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ListRelationResponse, error)
}

type objectsClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectsClient(cc grpc.ClientConnInterface) ObjectsClient {
	return &objectsClient{cc}
}

func (c *objectsClient) List(ctx context.Context, in *ListObjectRequest, opts ...grpc.CallOption) (*ListObjectResponse, error) {
	out := new(ListObjectResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) Get(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) Delete(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) Create(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) Update(ctx context.Context, in *ObjectUpdateRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) Watch(ctx context.Context, in *ListObjectRequest, opts ...grpc.CallOption) (Objects_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Objects_serviceDesc.Streams[0], "/zhihu.cmdb.api.v1.Objects/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectsWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Objects_WatchClient interface {
	Recv() (*ObjectEvent, error)
	grpc.ClientStream
}

type objectsWatchClient struct {
	grpc.ClientStream
}

func (x *objectsWatchClient) Recv() (*ObjectEvent, error) {
	m := new(ObjectEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectsClient) Relations(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ListRelationResponse, error) {
	out := new(ListRelationResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Objects/Relations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectsServer is the server API for Objects service.
type ObjectsServer interface {
	List(context.Context, *ListObjectRequest) (*ListObjectResponse, error)
	Get(context.Context, *GetObjectRequest) (*Object, error)
	Delete(context.Context, *DeleteObjectRequest) (*Object, error)
	Create(context.Context, *Object) (*Object, error)
	Update(context.Context, *ObjectUpdateRequest) (*Object, error)
	Watch(*ListObjectRequest, Objects_WatchServer) error
	Relations(context.Context, *GetObjectRequest) (*ListRelationResponse, error)
}

// UnimplementedObjectsServer can be embedded to have forward compatible implementations.
type UnimplementedObjectsServer struct {
}

func (*UnimplementedObjectsServer) List(context.Context, *ListObjectRequest) (*ListObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedObjectsServer) Get(context.Context, *GetObjectRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedObjectsServer) Delete(context.Context, *DeleteObjectRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedObjectsServer) Create(context.Context, *Object) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedObjectsServer) Update(context.Context, *ObjectUpdateRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedObjectsServer) Watch(*ListObjectRequest, Objects_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedObjectsServer) Relations(context.Context, *GetObjectRequest) (*ListRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relations not implemented")
}

func RegisterObjectsServer(s *grpc.Server, srv ObjectsServer) {
	s.RegisterService(&_Objects_serviceDesc, srv)
}

func _Objects_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).List(ctx, req.(*ListObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).Get(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).Delete(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).Create(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).Update(ctx, req.(*ObjectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectsServer).Watch(m, &objectsWatchServer{stream})
}

type Objects_WatchServer interface {
	Send(*ObjectEvent) error
	grpc.ServerStream
}

type objectsWatchServer struct {
	grpc.ServerStream
}

func (x *objectsWatchServer) Send(m *ObjectEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Objects_Relations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).Relations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Objects/Relations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).Relations(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Objects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zhihu.cmdb.api.v1.Objects",
	HandlerType: (*ObjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Objects_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Objects_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Objects_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Objects_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Objects_Update_Handler,
		},
		{
			MethodName: "Relations",
			Handler:    _Objects_Relations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Objects_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/service.proto",
}

// ObjectTypesClient is the client API for ObjectTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectTypesClient interface {
	Create(ctx context.Context, in *ObjectType, opts ...grpc.CallOption) (*ObjectType, error)
	Update(ctx context.Context, in *UpdateObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error)
	List(ctx context.Context, in *ListObjectTypesRequest, opts ...grpc.CallOption) (*ListObjectTypesResponse, error)
	Get(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error)
	Delete(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error)
}

type objectTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectTypesClient(cc grpc.ClientConnInterface) ObjectTypesClient {
	return &objectTypesClient{cc}
}

func (c *objectTypesClient) Create(ctx context.Context, in *ObjectType, opts ...grpc.CallOption) (*ObjectType, error) {
	out := new(ObjectType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.ObjectTypes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectTypesClient) Update(ctx context.Context, in *UpdateObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error) {
	out := new(ObjectType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.ObjectTypes/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectTypesClient) List(ctx context.Context, in *ListObjectTypesRequest, opts ...grpc.CallOption) (*ListObjectTypesResponse, error) {
	out := new(ListObjectTypesResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.ObjectTypes/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectTypesClient) Get(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error) {
	out := new(ObjectType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.ObjectTypes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectTypesClient) Delete(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*ObjectType, error) {
	out := new(ObjectType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.ObjectTypes/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectTypesServer is the server API for ObjectTypes service.
type ObjectTypesServer interface {
	Create(context.Context, *ObjectType) (*ObjectType, error)
	Update(context.Context, *UpdateObjectTypeRequest) (*ObjectType, error)
	List(context.Context, *ListObjectTypesRequest) (*ListObjectTypesResponse, error)
	Get(context.Context, *GetObjectTypeRequest) (*ObjectType, error)
	Delete(context.Context, *GetObjectTypeRequest) (*ObjectType, error)
}

// UnimplementedObjectTypesServer can be embedded to have forward compatible implementations.
type UnimplementedObjectTypesServer struct {
}

func (*UnimplementedObjectTypesServer) Create(context.Context, *ObjectType) (*ObjectType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedObjectTypesServer) Update(context.Context, *UpdateObjectTypeRequest) (*ObjectType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedObjectTypesServer) List(context.Context, *ListObjectTypesRequest) (*ListObjectTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedObjectTypesServer) Get(context.Context, *GetObjectTypeRequest) (*ObjectType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedObjectTypesServer) Delete(context.Context, *GetObjectTypeRequest) (*ObjectType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterObjectTypesServer(s *grpc.Server, srv ObjectTypesServer) {
	s.RegisterService(&_ObjectTypes_serviceDesc, srv)
}

func _ObjectTypes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectTypesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.ObjectTypes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectTypesServer).Create(ctx, req.(*ObjectType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectTypes_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectTypesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.ObjectTypes/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectTypesServer).Update(ctx, req.(*UpdateObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectTypes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectTypesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.ObjectTypes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectTypesServer).List(ctx, req.(*ListObjectTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectTypes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectTypesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.ObjectTypes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectTypesServer).Get(ctx, req.(*GetObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectTypes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectTypesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.ObjectTypes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectTypesServer).Delete(ctx, req.(*GetObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectTypes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zhihu.cmdb.api.v1.ObjectTypes",
	HandlerType: (*ObjectTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ObjectTypes_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ObjectTypes_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ObjectTypes_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ObjectTypes_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ObjectTypes_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/service.proto",
}

// RelationTypesClient is the client API for RelationTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelationTypesClient interface {
	Create(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error)
	Update(ctx context.Context, in *UpdateRelationTypeRequest, opts ...grpc.CallOption) (*RelationType, error)
	List(ctx context.Context, in *ListRelationTypesRequest, opts ...grpc.CallOption) (*ListRelationTypesResponse, error)
	Get(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error)
	Delete(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error)
}

type relationTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationTypesClient(cc grpc.ClientConnInterface) RelationTypesClient {
	return &relationTypesClient{cc}
}

func (c *relationTypesClient) Create(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error) {
	out := new(RelationType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.RelationTypes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationTypesClient) Update(ctx context.Context, in *UpdateRelationTypeRequest, opts ...grpc.CallOption) (*RelationType, error) {
	out := new(RelationType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.RelationTypes/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationTypesClient) List(ctx context.Context, in *ListRelationTypesRequest, opts ...grpc.CallOption) (*ListRelationTypesResponse, error) {
	out := new(ListRelationTypesResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.RelationTypes/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationTypesClient) Get(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error) {
	out := new(RelationType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.RelationTypes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationTypesClient) Delete(ctx context.Context, in *RelationType, opts ...grpc.CallOption) (*RelationType, error) {
	out := new(RelationType)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.RelationTypes/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationTypesServer is the server API for RelationTypes service.
type RelationTypesServer interface {
	Create(context.Context, *RelationType) (*RelationType, error)
	Update(context.Context, *UpdateRelationTypeRequest) (*RelationType, error)
	List(context.Context, *ListRelationTypesRequest) (*ListRelationTypesResponse, error)
	Get(context.Context, *RelationType) (*RelationType, error)
	Delete(context.Context, *RelationType) (*RelationType, error)
}

// UnimplementedRelationTypesServer can be embedded to have forward compatible implementations.
type UnimplementedRelationTypesServer struct {
}

func (*UnimplementedRelationTypesServer) Create(context.Context, *RelationType) (*RelationType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRelationTypesServer) Update(context.Context, *UpdateRelationTypeRequest) (*RelationType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRelationTypesServer) List(context.Context, *ListRelationTypesRequest) (*ListRelationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRelationTypesServer) Get(context.Context, *RelationType) (*RelationType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRelationTypesServer) Delete(context.Context, *RelationType) (*RelationType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRelationTypesServer(s *grpc.Server, srv RelationTypesServer) {
	s.RegisterService(&_RelationTypes_serviceDesc, srv)
}

func _RelationTypes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTypesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.RelationTypes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTypesServer).Create(ctx, req.(*RelationType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationTypes_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTypesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.RelationTypes/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTypesServer).Update(ctx, req.(*UpdateRelationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationTypes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTypesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.RelationTypes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTypesServer).List(ctx, req.(*ListRelationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationTypes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTypesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.RelationTypes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTypesServer).Get(ctx, req.(*RelationType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationTypes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationTypesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.RelationTypes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationTypesServer).Delete(ctx, req.(*RelationType))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationTypes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zhihu.cmdb.api.v1.RelationTypes",
	HandlerType: (*RelationTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RelationTypes_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RelationTypes_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RelationTypes_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RelationTypes_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RelationTypes_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/service.proto",
}

// RelationsClient is the client API for Relations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelationsClient interface {
	Create(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error)
	Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error)
	Update(ctx context.Context, in *UpdateRelationRequest, opts ...grpc.CallOption) (*Relation, error)
	Delete(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error)
	List(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*ListRelationResponse, error)
	// all object's name can be empty,means look up all relations.
	// when call from http request, use `_` instead of empty.
	Edges(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*ListRelationResponse, error)
	Watch(ctx context.Context, in *WatchRelationRequest, opts ...grpc.CallOption) (Relations_WatchClient, error)
}

type relationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationsClient(cc grpc.ClientConnInterface) RelationsClient {
	return &relationsClient{cc}
}

func (c *relationsClient) Create(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Update(ctx context.Context, in *UpdateRelationRequest, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Delete(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) List(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*ListRelationResponse, error) {
	out := new(ListRelationResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Edges(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*ListRelationResponse, error) {
	out := new(ListRelationResponse)
	err := c.cc.Invoke(ctx, "/zhihu.cmdb.api.v1.Relations/Edges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Watch(ctx context.Context, in *WatchRelationRequest, opts ...grpc.CallOption) (Relations_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Relations_serviceDesc.Streams[0], "/zhihu.cmdb.api.v1.Relations/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &relationsWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relations_WatchClient interface {
	Recv() (*RelationEvent, error)
	grpc.ClientStream
}

type relationsWatchClient struct {
	grpc.ClientStream
}

func (x *relationsWatchClient) Recv() (*RelationEvent, error) {
	m := new(RelationEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelationsServer is the server API for Relations service.
type RelationsServer interface {
	Create(context.Context, *Relation) (*Relation, error)
	Get(context.Context, *Relation) (*Relation, error)
	Update(context.Context, *UpdateRelationRequest) (*Relation, error)
	Delete(context.Context, *Relation) (*Relation, error)
	List(context.Context, *ListRelationRequest) (*ListRelationResponse, error)
	// all object's name can be empty,means look up all relations.
	// when call from http request, use `_` instead of empty.
	Edges(context.Context, *Relation) (*ListRelationResponse, error)
	Watch(*WatchRelationRequest, Relations_WatchServer) error
}

// UnimplementedRelationsServer can be embedded to have forward compatible implementations.
type UnimplementedRelationsServer struct {
}

func (*UnimplementedRelationsServer) Create(context.Context, *Relation) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRelationsServer) Get(context.Context, *Relation) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRelationsServer) Update(context.Context, *UpdateRelationRequest) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRelationsServer) Delete(context.Context, *Relation) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRelationsServer) List(context.Context, *ListRelationRequest) (*ListRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRelationsServer) Edges(context.Context, *Relation) (*ListRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edges not implemented")
}
func (*UnimplementedRelationsServer) Watch(*WatchRelationRequest, Relations_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterRelationsServer(s *grpc.Server, srv RelationsServer) {
	s.RegisterService(&_Relations_serviceDesc, srv)
}

func _Relations_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Create(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Get(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Update(ctx, req.(*UpdateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Delete(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).List(ctx, req.(*ListRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Edges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Edges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhihu.cmdb.api.v1.Relations/Edges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Edges(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRelationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelationsServer).Watch(m, &relationsWatchServer{stream})
}

type Relations_WatchServer interface {
	Send(*RelationEvent) error
	grpc.ServerStream
}

type relationsWatchServer struct {
	grpc.ServerStream
}

func (x *relationsWatchServer) Send(m *RelationEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Relations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zhihu.cmdb.api.v1.Relations",
	HandlerType: (*RelationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Relations_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Relations_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Relations_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Relations_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Relations_List_Handler,
		},
		{
			MethodName: "Edges",
			Handler:    _Relations_Edges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Relations_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/service.proto",
}
