syntax = "proto3";
package zhihu.cmdb.api.v1;
option java_package = "com.zhihu.cmdb.api.v1";
option go_package = "pkg/api/v1;v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

// models define

enum ValueType {
    STRING = 0;
    INTEGER = 1;
    DOUBLE = 2;
    BOOLEAN = 3;
}

message ObjectType {
    string name = 1;
    string description = 2;
    map<string, ObjectStatus> statuses = 3;
    map<string, ObjectMeta> metas = 4;
    google.protobuf.Timestamp create_time = 5;
    google.protobuf.Timestamp delete_time = 6;
}

message ObjectStatus {
    string name = 1;
    string description = 2;
    map<string, ObjectState> states = 3;
}

message ObjectState {
    string name = 1;
    string description = 2;
}

message ObjectMeta {
    string name = 1;
    string description = 2;
    ValueType value_type = 3;
}


message Object {
    string type = 1;
    string name = 2;
    string description = 3;
    string status = 4;
    string state = 5;
    uint64 version = 6;
    google.protobuf.Timestamp create_time = 7;
    google.protobuf.Timestamp update_time = 8;
    map<string, ObjectMetaValue> metas = 9;
}

message ObjectMetaValue {
    ValueType value_type = 1;
    string value = 2;
}

// Objects service define:

message ListObjectRequest {
    string type = 1;
    ObjectView view = 2;
    string query = 3;
    string page_token = 4;
    int32 page_size = 5;
    bool show_deleted = 6;
}

message GetObjectRequest {
    string type = 1;
    string name = 2;
    ObjectView view = 3;
}

message DeleteObjectRequest {
    string type = 1;
    string name = 2;
}

message ListObjectResponse {
    string kind = 1;
    repeated Object objects = 2;
    string next_page_token = 3;
}

enum ObjectView {
    BASIC = 0;
    NORMAL = 1;
    RICH = 2;
}

enum WatchEventType {
    INIT = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
}

message ObjectEvent {
    repeated Object objects = 1;
    WatchEventType type = 2;
}

message ObjectUpdateRequest {
    Object object = 1;
    google.protobuf.FieldMask update_mask = 2;
    bool match_version = 3;
}

service Objects {
    rpc List (ListObjectRequest) returns (ListObjectResponse) {
        option (google.api.http) = {
            get: "/v1/api/objects/{type}"
        };
    };
    rpc Get (GetObjectRequest) returns (Object) {
        option (google.api.http) = {
            get: "/v1/api/objects/{type}/{name}"
        };
    };
    rpc Delete (DeleteObjectRequest) returns (Object) {
        option (google.api.http) = {
            delete: "/v1/api/objects/{type}/{name}"
        };
    };

    rpc Create (Object) returns (Object) {
        option (google.api.http) = {
            post: "/v1/api/objects"
            body: "*"
        };
    }
    rpc Update (ObjectUpdateRequest) returns (Object) {
        option (google.api.http) = {
            put: "/v1/api/objects"
            body: "*"
        };
    }
    rpc Watch (ListObjectRequest) returns (stream ObjectEvent) {
        option (google.api.http) = {
            get: "/v1/api/objects/{type}/*/watch"
        };
    }
    rpc Relations (GetObjectRequest) returns (ListRelationResponse) {
        option (google.api.http) = {
            get: "/v1/api/objects/{type}/{name}/relations"
        };
    }
}

// ObjectTypes service define:

message GetObjectTypeRequest {
    string name = 1;
}

message ListObjectTypesRequest {
    bool show_deleted = 1;
    bool consistent = 2;
}

message ListObjectTypesResponse {
    repeated ObjectType types = 1;
}

message UpdateObjectTypeRequest {
    ObjectType type = 1;
    google.protobuf.FieldMask update_mask = 2;
}

service ObjectTypes {
    rpc Create (ObjectType) returns (ObjectType) {
        option (google.api.http) = {
            post: "/v1/api/object_types"
            body: "*"
        };
    };
    rpc Update (UpdateObjectTypeRequest) returns (ObjectType) {
        option (google.api.http) = {
            put: "/v1/api/object_types"
            body: "*"
        };
    };
    rpc List (ListObjectTypesRequest) returns (ListObjectTypesResponse) {
        option (google.api.http) = {
            get: "/v1/api/object_types"
        };
    };
    rpc Get (GetObjectTypeRequest) returns (ObjectType) {
        option (google.api.http) = {
            get: "/v1/api/object_types/{name}"
        };
    }
    rpc Delete (GetObjectTypeRequest) returns (ObjectType) {
        option (google.api.http) = {
            delete: "/v1/api/object_types/{name}"
        };
    };
}

message RelationType {
    string name = 1;
    string from = 2;
    string to = 3;
    string description = 4;
    map<string, ObjectMeta> metas = 5;
    google.protobuf.Timestamp create_time = 6;
    google.protobuf.Timestamp update_time = 7;
    google.protobuf.Timestamp delete_time = 8;
}


message ListRelationTypesRequest {
    bool show_deleted = 1;
    bool consistent = 2;
}

message UpdateRelationTypeRequest {
    RelationType type = 1;
    google.protobuf.FieldMask update_mask = 2;
}

message ListRelationTypesResponse {
    repeated RelationType types = 1;
}

service RelationTypes {
    rpc Create (RelationType) returns (RelationType) {
        option (google.api.http) = {
            post: "/v1/api/relation_types"
            body: "*"
        };
    };
    rpc Update (UpdateRelationTypeRequest) returns (RelationType) {
        option (google.api.http) = {
            put: "/v1/api/relation_types"
            body: "*"
        };
    };
    rpc List (ListRelationTypesRequest) returns (ListRelationTypesResponse) {
        option (google.api.http) = {
            get: "/v1/api/relation_types"
        };
    };
    rpc Get (RelationType) returns (RelationType) {
        option (google.api.http) = {
            get: "/v1/api/relation_types/{name}"
        };
    };
    rpc Delete (RelationType) returns (RelationType) {
        option (google.api.http) = {
            delete: "/v1/api/relation_types/{name}"
        };
    };
}

message ObjectReference {
    string type = 1;
    string name = 2;
}

message Relation {
    string relation = 1;
    ObjectReference from = 2;
    ObjectReference to = 3;
    map<string, ObjectMetaValue> metas = 6;
    google.protobuf.Timestamp create_time = 7;
    google.protobuf.Timestamp update_time = 8;
    google.protobuf.Timestamp delete_time = 9;
}

message RichRelation {
    string relation = 1;
    Object from = 2;
    Object to = 3;
    map<string, ObjectMetaValue> metas = 6;
    google.protobuf.Timestamp create_time = 7;
    google.protobuf.Timestamp update_time = 8;
    google.protobuf.Timestamp delete_time = 9;
}

message UpdateRelationRequest {
    Relation relation = 1;
    google.protobuf.FieldMask update_mask = 2;
}

message ListRelationRequest {
    string from = 1;
    string to = 2;
    string relation = 3;
}

message WatchRelationRequest {
    string from = 1;
    string to = 2;
    string relation = 3;
    string query = 4;
}

message ListRelationResponse {
    repeated Relation relations = 1;
}

message RelationEvent {
    repeated RichRelation relations = 1;
    WatchEventType type = 2;
}

service Relations {
    rpc Create (Relation) returns (Relation) {
        option (google.api.http) = {
            post: "/v1/api/objects/{from.type}/{from.name}/relations/{relation}/{to.type}/{to.name}"
            body: "*"
        };
    };
    rpc Get (Relation) returns (Relation) {
        option (google.api.http) = {
            get: "/v1/api/objects/{from.type}/{from.name}/relations/{relation}/{to.type}/{to.name}"
        };
    };
    rpc Update (UpdateRelationRequest) returns (Relation) {
        option (google.api.http) = {
            put: "/v1/api/objects/{relation.from.type}/{relation.from.name}/relations/{relation.relation}/{relation.to.type}/{relation.to.name}"
            body: "*"
        };
    };
    rpc Delete (Relation) returns (Relation) {
        option (google.api.http) = {
            delete: "/v1/api/objects/{from.type}/{from.name}/relations/{relation}/{to.type}/{to.name}"
        };
    };
    rpc List (ListRelationRequest) returns (ListRelationResponse) {
        option (google.api.http) = {
            get: "/v1/api/relations/{from}/{to}/{relation}"
        };
    };

    // all object's name can be empty,means look up all relations.
    // when call from http request, use `_` instead of empty.
    rpc Edges (Relation) returns (ListRelationResponse) {
        option (google.api.http) = {
            get: "/v1/api/edges/{from.type}/{from.name}/{relation}/{to.type}/{to.name}"
        };
    }

    rpc Watch (WatchRelationRequest) returns (stream RelationEvent) {
        option (google.api.http) = {
            get: "/v1/api/relations/{from}/{to}/{relation}/watch"
        };
    }
}